swagger: "2.0"
info:
  version: "0.0.1"
  title: Eternus v2 APIs
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /api/v2
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /users-nosql:
    x-swagger-router-controller: users
    get:
      tags:
        - user
      operationId: getUsersNoSql
      summary: Get list of user
      description: Get list of user
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users-sql:
    x-swagger-router-controller: users
    get:
      tags:
        - user
      operationId: getUsersSql
      summary: Get list of user with SQL Query
      description: Get list of user
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user:
    x-swagger-router-controller: users
    post:
      tags:
        - user
      operationId: createUser
      summary: Create user to account
      description: Create user to account.
      parameters:
        - name: body
          required: true
          in: body
          schema:
            $ref: '#/definitions/UserRequest'
      responses:
        '200':
          description: Create user success.
          schema:
            allOf:
              - $ref: "#/definitions/SuccessResponse"
              - properties:
                  data:
                    type: object
                    items:
                      $ref: "#/definitions/UserResponse"
        default:
          description: An error occurred
          schema:
            $ref: '#/definitions/ErrorResponse'
  
  /user/{userId}:
    x-swagger-router-controller: users
    get:
      tags:
        - user
      operationId: getUser
      summary: Get an user details
      description: Get an user details
      parameters:
        - name: userId
          type: number
          required: true
          in: path
      responses:
        '200':
          description: Get user details successfully
          schema:
            allOf:
              - $ref: "#/definitions/SuccessResponse"
              - properties:
                  data:
                    type: object
                    items:
                      $ref: "#/definitions/UserResponse"
        default:
          description: An error occurred
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - user
      operationId: updateUser
      summary: Update user to account
      description: Update user to account.
      parameters:
        - name: userId
          type: number
          required: true
          in: path
        - name: body
          required: true
          in: body
          schema:
            $ref: '#/definitions/UserRequest'
      responses:
        '200':
          description: User update success.
          schema:
            allOf:
              - $ref: "#/definitions/SuccessResponse"
              - properties:
                  data:
                    type: object
                    items:
                      $ref: "#/definitions/UserResponse"
        default:
          description: An error occurred
          schema:
            $ref: '#/definitions/ErrorResponse'
  /swagger:
    x-swagger-pipe: swagger_raw

# complex objects have schema definitions
definitions:
  UserListResponse:
    required:
      - statusCode
      - message
      - data
    properties:
      statusCode:
        type: number
      message:
        type: string
      data:
        type: object
        required:
          - total
          - users
        properties:
          total:
            type: number
            description: total item count
          users:
            type: array
            items:
              $ref: '#/definitions/UserResponse'
  UserResponse:
    properties:
      id:
        description: User's id
        type: number
      name:
        description: User's name
        type: string
      email:
        description: User's emai
        type: string
      createdAt:
        description: User's created at
        type: string
      updatedAt:
        description: User's updated at
        type: string
  UserRequest:
   required:
     - name
   properties:
     name:
        type: string
        description: User's name
  SuccessResponse:
    required:
      - statusCode
      - message
      - data
    properties:
      statusCode:
        type: number
      message:
        type: string
      data:
        type: ["array", "object"]
  ErrorResponse:
    required:
      - statusCode
      - error
      - message
    properties:
      statusCode:
        type: number
      error:
        type: string
      message:
        type: string
